#!/bin/bash

# Script de prueba espec√≠fico para verificar las correcciones aplicadas
echo "üîß Verificando correcciones espec√≠ficas..."
echo "=========================================="

# Verificar que el servidor est√© ejecut√°ndose
echo "1. Verificando estado del servidor..."
if curl -s https://applications.bonaventurecclub.com/health > /dev/null; then
    echo "‚úÖ Servidor backend funcionando"
else
    echo "‚ùå Servidor backend no disponible"
    exit 1
fi

# Probar endpoint de estad√≠sticas (deber√≠a funcionar)
echo "2. Probando endpoint de estad√≠sticas..."
STATS_RESPONSE=$(curl -s https://applications.bonaventurecclub.com/api/requests/stats)
if echo "$STATS_RESPONSE" | grep -q "success"; then
    echo "‚úÖ Endpoint de estad√≠sticas funcionando"
else
    echo "‚ùå Error en endpoint de estad√≠sticas"
    echo "   Respuesta: $STATS_RESPONSE"
fi

# Probar endpoint de solicitudes con par√°metros espec√≠ficos
echo "3. Probando endpoint de solicitudes con par√°metros espec√≠ficos..."

# Test 1: Sin par√°metros (deber√≠a usar defaults)
echo "   Test 1: Sin par√°metros"
REQUESTS_RESPONSE1=$(curl -s "https://applications.bonaventurecclub.com/api/requests")
if echo "$REQUESTS_RESPONSE1" | grep -q "success"; then
    echo "   ‚úÖ √âxito sin par√°metros"
else
    echo "   ‚ùå Error sin par√°metros"
    echo "   Respuesta: $REQUESTS_RESPONSE1"
fi

# Test 2: Con par√°metros expl√≠citos
echo "   Test 2: Con par√°metros expl√≠citos"
REQUESTS_RESPONSE2=$(curl -s "https://applications.bonaventurecclub.com/api/requests?page=1&limit=5")
if echo "$REQUESTS_RESPONSE2" | grep -q "success"; then
    echo "   ‚úÖ √âxito con par√°metros expl√≠citos"
else
    echo "   ‚ùå Error con par√°metros expl√≠citos"
    echo "   Respuesta: $REQUESTS_RESPONSE2"
fi

# Test 3: Con user_id
echo "   Test 3: Con user_id"
USER_REQUESTS_RESPONSE=$(curl -s "https://applications.bonaventurecclub.com/api/requests?user_id=1&page=1&limit=5")
if echo "$USER_REQUESTS_RESPONSE" | grep -q "success"; then
    echo "   ‚úÖ √âxito con user_id"
else
    echo "   ‚ùå Error con user_id"
    echo "   Respuesta: $USER_REQUESTS_RESPONSE"
fi

# Test 4: Par√°metros edge case
echo "   Test 4: Par√°metros edge case"
EDGE_RESPONSE=$(curl -s "https://applications.bonaventurecclub.com/api/requests?page=0&limit=0")
if echo "$EDGE_RESPONSE" | grep -q "error"; then
    echo "   ‚úÖ Manejo correcto de par√°metros inv√°lidos"
else
    echo "   ‚ö†Ô∏è  Par√°metros inv√°lidos no manejados correctamente"
    echo "   Respuesta: $EDGE_RESPONSE"
fi

echo ""
echo "üéØ Resumen de correcciones aplicadas:"
echo "====================================="
echo "‚úÖ Corregido: Par√°metros de paginaci√≥n convertidos a enteros en middleware"
echo "‚úÖ Corregido: Trust proxy configurado condicionalmente"
echo "‚úÖ Corregido: Rate limiting deshabilitado para desarrollo"
echo "‚úÖ Corregido: Par√°metros LIMIT/OFFSET convertidos a enteros en modelo"
echo "‚úÖ Corregido: current_user_id agregado al JavaScript de WordPress"

echo ""
echo "üìã Pr√≥ximos pasos:"
echo "=================="
echo "1. Reiniciar el servidor backend: npm start"
echo "2. Verificar que no aparezcan errores de MySQL en logs"
echo "3. Probar los shortcodes de WordPress"
echo "4. Ejecutar debugging MySQL: node debug-mysql.js"

echo ""
echo "üîç Para debugging adicional:"
echo "==========================="
echo "- Ver logs del servidor en tiempo real"
echo "- Ejecutar: node debug-mysql.js"
echo "- Verificar variables de entorno"
echo "- Probar endpoints individualmente"
